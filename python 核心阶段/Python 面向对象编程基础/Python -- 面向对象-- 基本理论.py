# 什么是对象 -- 万物皆对象
#   对象是具体物体 -- 拥有属性、拥有行为、把很多零碎的东西封装成一个整体
#   举例：
#       王二小
#           属性： 姓名、年龄、身高、体重 ...
#           行为： 走路、吃饭、放羊...
# python 中的体现 -- Python是一门彻底的面向对象编程（opp）的语言


# ----------------------------------------------------------------
# 面向对象和面向过程的区别
#   都是一种解决问题的思路(思想) --- 面向对象本身就是面向过程的封装
#       面向过程 -- 在解决问题的时候，关注是解决问题的每一个的过程（步骤）
#       面向对象 -- 在解决问题的时候，关注的是解决问题所需要的对象
#   举例： --- 做饭之后洗碗：
#       面向过程： 你 -- 洗菜、点火倒油、放菜材料、翻炒、出锅、 放水、到洗洁精、刷、冲水，摆放好、
#       面向对象： 你 * 对象： 技能1、技能2
#           技能1: 做饭 -- 洗菜、点火倒油、放菜材料、翻炒、出锅
#           技能2： 放水、到洗洁精、刷、冲水，摆放好

# 面向过程编程最重要的是什么？
#   按照步骤划分 -- 把一个任务，分解成具体的每一个步骤

# 面向对象编程最重要的是什么？
#   按照对象进行划分 -- 找到对象，确定对象属性和行为

# 如何从面向过程编程的思想，过度到面向对象的思想？
#   1，一样的，列举出一个任务的具体实现步骤
#   2，试图分离这些实现步骤的功能代码块
#   3，将这些功能代码块，划分到某一个对象中
#   4，根据这个对象，以及对应的行为，抽象出对应的类 -- 设计类



# ----------------------------------------------------------------
# 什么类？
#   某一个具体对象特征的抽象
#   例如：
#       张三这个具体的人
#           属性：年龄：18、升高：180，体重：250
#           行为：吃：吧唧嘴， 喝： 放白糖 ，嫖：不给钱， 赌：没赢过
#       抽象出来的类： 不良青年
#           属性：年龄、身高、体重...  --抽象的概念 不是具体的概念
#           行为：吃、喝、嫖、赌...

# 类的作用？
#   根据抽象的类，产生具体对象
#   例如： 类 -- 不良青年 ---- 属性，行为
#         对象 -- 张三（不同的身高、体重等属性 ，  不同的行为）
#                王五（不同的身高、体重等属性 ，  不同的行为）
#                李四（不同的身高、体重等属性 ，  不同的行为）


# 类的组成
# 名称、属性、方法
#   一定要注意：
#       以上属性和方法,都是抽象概念
#       在产生对象之后，对象才拥有具体的属性值、和方法实现

# 对象和类的关系：
#   对象 -- 抽象的过程 -- 类 -- 实例化的过程-- 对象